# Generated by Django 4.2.6 on 2024-03-13 18:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_name', models.CharField(max_length=200)),
                ('place_type', models.CharField(blank=True, choices=[('Парк', 'Парк'), ('Кафе', 'Кафе'), ('Ресторан', 'Ресторан'), ('Бар', 'Бар'), ('Выставка', 'Выставка'), ('Музей', 'Музей'), ('Кофейня', 'Кофейня'), ('Спа', 'Спа'), ('Спорт', 'Спорт'), ('Культурное пространство', 'Культурное пространство'), ('Антикафе', 'Антикафе'), ('Клуб', 'Клуб'), ('Театр', 'Театр'), ('Концерт', 'Концерт')], max_length=200, null=True)),
                ('place_cost', models.IntegerField(blank=True, null=True)),
                ('place_link', models.CharField(blank=True, max_length=200, null=True)),
                ('place_address', models.CharField(blank=True, max_length=200, null=True)),
                ('place_image', models.URLField(blank=True)),
                ('place_working_hours_start', models.TimeField(blank=True, null=True)),
                ('place_working_hours_finish', models.TimeField(blank=True, null=True)),
                ('place_goal1', models.CharField(blank=True, choices=[('Свидание', 'Свидание'), ('Спокойный отдых', 'Спокойный отдых'), ('Активный отдых', 'Активный отдых'), ('Развлечения', 'Развлечения'), ('Обучение', 'Обучение'), ('Для детей', 'Для детей'), ('Еда', 'Еда')], max_length=200, null=True)),
                ('place_goal2', models.CharField(blank=True, choices=[('Свидание', 'Свидание'), ('Спокойный отдых', 'Спокойный отдых'), ('Активный отдых', 'Активный отдых'), ('Развлечения', 'Развлечения'), ('Обучение', 'Обучение'), ('Для детей', 'Для детей'), ('Еда', 'Еда')], max_length=200, null=True)),
                ('place_goal3', models.CharField(blank=True, choices=[('Свидание', 'Свидание'), ('Спокойный отдых', 'Спокойный отдых'), ('Активный отдых', 'Активный отдых'), ('Развлечения', 'Развлечения'), ('Обучение', 'Обучение'), ('Для детей', 'Для детей'), ('Еда', 'Еда')], max_length=200, null=True)),
                ('place_rating', models.FloatField(blank=True, max_length=3, null=True)),
                ('place_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
